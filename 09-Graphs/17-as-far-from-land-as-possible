class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> vis(n,vector<int> (n,0));
        vector<vector<int>> dist(n,vector<int> (n,-1));

        queue<pair<int,pair<int,int>>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 1){
                    vis[i][j] = 1;
                    dist[i][j] = -1;
                    q.push({0,{i,j}});
                }
            }
        }

        int drow[] = {-1,0,1,0};
        int dcol[] = {0,1,0,-1};

        while(!q.empty()){
            int size = q.size();
            for(int i=0;i<size;i++){
                auto it = q.front();
                q.pop();

                int dis = it.first;
                int row = it.second.first;
                int col = it.second.second;

                for(int i=0;i<4;i++){
                    int nrow = row + drow[i];
                    int ncol = col + dcol[i];

                    if(nrow < n && nrow >= 0 && ncol >= 0 && ncol < n &&
                    vis[nrow][ncol] == 0){
                        vis[nrow][ncol] = 1;
                        dist[nrow][ncol] = dis+1;
                        q.push({dis+1,{nrow,ncol}});
                    }
                }
            }
        }

        int ans = -1;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                ans = max(ans,dist[i][j]);
            }
        }
        return ans;
    }
};