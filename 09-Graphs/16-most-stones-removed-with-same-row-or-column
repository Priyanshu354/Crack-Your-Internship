class DisjointSet{
public:
    vector<int> rank,parent;
    DisjointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
        }
    }

    int findUParent(int u){
        if(parent[u] == u) return u;
        return parent[u] = findUParent(parent[u]);
    }

    void unionByRank(int u,int v){
        int up_u=findUParent(u);
        int up_v=findUParent(v);

        if(up_u==up_v){
            return ;
        }
        if(rank[up_v]>rank[up_u]){
            parent[up_u]=up_v;
        }
        else if(rank[up_v]<rank[up_u]){
            parent[up_v]=up_u;
        }
        else{
            parent[up_u]=up_v;
            rank[up_v]++;
        }
    }
};

class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int maxrow = 0;
        int maxcol = 0;

        for(auto it : stones){
            maxrow = max(maxrow,it[0]);
            maxcol = max(maxcol,it[1]);
        }

        DisjointSet ds(maxrow + maxcol + 1);
        unordered_map<int,int> stoneNodes;
        for(auto it : stones){
            int noderow = it[0];
            int nodecol = it[1] + maxrow + 1;

            ds.unionByRank(noderow,nodecol);
            stoneNodes[noderow] = 1;
            stoneNodes[nodecol] = 1;
        }

        int cnt = 0;
        for(auto it : stoneNodes){
            if(ds.findUParent(it.first) == it.first){
                cnt++;
            }
        }
        return stones.size()-cnt;
    }
};