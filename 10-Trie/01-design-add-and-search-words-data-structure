class Trie {
public:
    Trie* links[26];
    bool flag;

    Trie() {
        for (auto &link : links) link = NULL;
        flag = false; 
    }
};

class WordDictionary {
public:
    Trie* root;

    WordDictionary() {
        root = new Trie();
    }
    
    void addWord(string word) {
        Trie* curr = root;
        for (char c : word) {
            int index = c - 'a';
            if (!curr->links[index]) {
                curr->links[index] = new Trie();
            }
            curr = curr->links[index];
        }
        curr->flag = true;
    }
    
    bool search(string word) {
        return searchInNode(word, 0, root);
    }
    
private:
    bool searchInNode(string &word, int pos, Trie* node) {
        if (!node) return false;
        if (pos == word.size()) return node->flag;
        
        char c = word[pos];
        if (c != '.') {
            int index = c - 'a';
            return searchInNode(word, pos + 1, node->links[index]);
        } else {
            for (int i = 0; i < 26; ++i) {
                if (searchInNode(word, pos + 1, node->links[i])) {
                    return true;
                }
            }
            return false;
        }
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
