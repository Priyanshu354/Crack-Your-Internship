class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> dp(n, vector<int>(m, 0));

        int maxi = 0;

        // Initialize the first row
        for (int j = 0; j < m; j++) {
            if(matrix[0][j] == '1'){
                dp[0][j] = 1;
                maxi = 1;
            }
        }

        // Initialize the first column
        for (int i = 0; i < n; i++) {
            if(matrix[i][0] == '1'){
                dp[i][0] = 1;
                maxi = 1;
            } 
        }

        // Fill the dp array
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (matrix[i][j] == '0') {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = 1 + min(dp[i - 1][j],
                                    min(dp[i - 1][j - 1], dp[i][j - 1]));
                }
                maxi = max(maxi, dp[i][j]);
            }
        }

        return maxi * maxi;
    }
};
